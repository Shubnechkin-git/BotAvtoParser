const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");
const cheerio = require("cheerio");
const express = require("express");

const mysql = require("mysql2");

let result = {};

let pool;

process.env.NODE_ENV === "development"
  ? (pool = mysql.createPool({
      host: "localhost",
      database: "bot_avtoparser",
      user: "root",
      password: "root",
    }))
  : (pool = mysql.createPool(process.env.MYSQL_ADDON_URI));

const sendQuery = (query) => {
  return new Promise((resolve, reject) => {
    if (query !== undefined)
      pool.getConnection((err, connection) => {
        if (err) {
          console.error(err);
          reject(err);
        } else if (connection) {
          connection.query(query, (error, result) => {
            if (error) {
              console.error(error);
              reject(error);
            } else if (result) {
              resolve(result);
            }
            connection.release();
          });
        }
      });
    else reject("–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∑–∞–ø—Ä–æ—Å!");
  });
};

//–ª–æ–≤—É—à–∫–∞ –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å–ª—É—à–∞–µ—Ç 8080 –ø–æ—Ä—Ç
const app = express();

app.get("/", async (req, res) => {
  try {
    const result = await sendQuery(req.query.query);
    res.send(result);
  } catch (error) {
    console.error(error);
    res.status(500).send(error);
  }
  //   http://localhost:8080/?query=select%20*%20from%20users
});

app.listen(8080);
//-------------------------------------------------

const token = "6502599565:AAGB9yvZAl2Y8VEEfrGPekojxoGg9qUteHM";
const bot = new TelegramBot(token, { polling: true });

// –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const searchParams = {
  brand: null,
  model: null,
  year: null,
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–∏
async function sendBrandSelection(chatId) {
  const keyboard = {
    force_reply: true,
  };
  await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏:", {
    reply_markup: keyboard,
  });
}

async function savedMenu(chatId, car, id = 0) {
  let keyboard;
  console.log(car.length);
  if (car.length > 1) {
    keyboard = {
      inline_keyboard: [
        [
          {
            text: "–î–∞–ª–µ–µ",
            callback_data: JSON.stringify({
              action: "next_save",
            }),
          },
          {
            text: "–£–¥–∞–ª–∏—Ç—å",
            callback_data: JSON.stringify({
              action: "delete_save",
              id: car[id].id,
            }),
          },
        ],
        [
          {
            text: "–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é",
            callback_data: JSON.stringify({ action: "exit" }),
          },
        ],
      ],
    };
  } else {
    keyboard = {
      inline_keyboard: [
        [
          {
            text: "–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é",
            callback_data: JSON.stringify({ action: "exit" }),
          },
          {
            text: "–£–¥–∞–ª–∏—Ç—å",
            callback_data: JSON.stringify({
              action: "delete_save",
              id: car.id,
            }),
          },
        ],
      ],
    };
  }

  await bot.sendMessage(chatId, `–î–µ–π—Å—Ç–≤–∏–µ:`, {
    reply_markup: keyboard,
  });
}

async function sendMenu(chatId) {
  const keyboard = {
    inline_keyboard: [
      [
        {
          text: "–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
          callback_data: JSON.stringify({ action: "restart_search" }),
        },
      ],
      [
        {
          text: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
          callback_data: JSON.stringify({ action: "saved" }),
        },
      ],
      [
        {
          text: "–ü–æ–¥–ø–∏—Å–∫–∏",
          callback_data: JSON.stringify({ action: "subscriptions" }),
        },
      ],
    ],
  };
  await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å–≤–∏–µ:", {
    reply_markup: keyboard,
  });
}
// TODO –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–¥–ø–∏—Å–∫–∏
const subscriptions = async (chatId, status = false) => {
  const keyboard = {
    inline_keyboard: [
      [
        {
          text: status ? "üö©–í–∫–ª—é—á–∏—Ç—å" : "–í–∫–ª—é—á–∏—Ç—å",
          callback_data: JSON.stringify({ action: "enable" }),
        },
        {
          text: !status ? "üö©–í—ã–∫–ª—é—á–∏—Ç—å" : "–í—ã–∫–ª—é—á–∏—Ç—å",
          callback_data: JSON.stringify({ action: "disable" }),
        },
      ],
      [
        {
          text: "–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é",
          callback_data: JSON.stringify({ action: "exit" }),
        },
      ],
    ],
  };

  await bot.sendMessage(chatId, "–ú–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫", {
    reply_markup: keyboard,
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
async function sendModelSelection(chatId) {
  // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Ä–∫–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–æ–¥–µ–ª–µ–π
  const keyboard = {
    force_reply: true,
  };
  await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:", {
    reply_markup: keyboard,
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤–≤–æ–¥–∞ –≥–æ–¥–∞
async function sendYearInput(chatId) {
  const keyboard = {
    force_reply: true,
  };
  await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:", {
    reply_markup: keyboard,
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function handleRandomMessage(chatId) {
  await bot.sendMessage(
    chatId,
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏–ª–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start"
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫" –∏–ª–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
async function sendSearchParams(chatId) {
  let message = "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:\n";
  message += `–ú–∞—Ä–∫–∞: ${searchParams.brand}\n`;
  message += `–ú–æ–¥–µ–ª—å: ${searchParams.model}\n`;
  message += `–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: ${searchParams.year}\n\n`;
  message += "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?";

  const keyboard = {
    inline_keyboard: [
      [
        {
          text: "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫",
          callback_data: JSON.stringify({ action: "start_search" }),
        },
      ],
      [
        {
          text: "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ",
          callback_data: JSON.stringify({ action: "restart_search" }),
        },
      ],
      [
        {
          text: "–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é",
          callback_data: JSON.stringify({ action: "exit" }),
        },
      ],
    ],
  };

  await bot.sendMessage(chatId, message, { reply_markup: keyboard });
}

let currentBulletinIndex = 0;
let bulletins = [];

let adsIndex = {};

async function searchAds(brand, model, year, chatId) {
  try {
    const response = await axios.get(
      `https://auto.drom.ru/${brand}/${model}/?minyear=${year}`
    );
    const $ = cheerio.load(response.data);
    const bulletinElements = $('[data-ftid="bulls-list_bull"]');

    bulletins = bulletinElements
      .toArray()
      .map((element) => $(element).attr("href"));
    currentBulletinIndex = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    if (chatId) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –ª–∏ chatId
      await sendCurrentBulletinWithButtons(chatId); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    }
    return bulletins;
  } catch (error) {
    console.error("Error fetching bulletins:", error);
    return [];
  }
}

async function sendCurrentBulletinWithButtons(chatId) {
  if (currentBulletinIndex < bulletins.length) {
    const bulletinUrl = bulletins[currentBulletinIndex];
    await bot.sendMessage(chatId, bulletinUrl);

    const keyboard = {
      inline_keyboard: [
        [{ text: "–î–∞–ª–µ–µ", callback_data: JSON.stringify({ action: "next" }) }],
        [
          {
            text: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            callback_data: JSON.stringify({ action: "save" }),
          },
        ],
        [
          {
            text: "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
            callback_data: JSON.stringify({ action: "restart_search" }),
          },
        ],
        [
          {
            text: "–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é",
            callback_data: JSON.stringify({ action: "exit" }),
          },
        ],
      ],
    };
    await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
      reply_markup: keyboard,
    });
  } else {
    const keyboard = {
      inline_keyboard: [
        [
          {
            text: "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
            callback_data: JSON.stringify({ action: "restart_search" }),
          },
        ],
      ],
    };
    await bot.sendMessage(chatId, "–ë–æ–ª—å—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.", {
      reply_markup: keyboard,
    });
  }
}

let status = false;
let userCronJobs = {};
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –≤—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
bot.on("callback_query", async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;

  let isReady = false;

  const data = JSON.parse(callbackQuery.data);
  const action = data.action && data.action;
  const id = data.id && data.id;

  if (action === "enable") {
    try {
      bot.deleteMessage(chatId, messageId);
      status = true;
      await subscriptions(chatId, status);
      userCronJobs[chatId] = cron.schedule("*/5 * * * * *", () => {
        sendNotification(chatId);
      });
      bot.sendMessage(
        chatId,
        "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥."
      );
    } catch (error) {
      bot.sendMessage(chatId, error.message);
    }
  } else if (action === "disable") {
    try {
      bot.deleteMessage(chatId, messageId);
      status = false;
      await subscriptions(chatId, status);
      userCronJobs[chatId].stop();
      delete userCronJobs[chatId];
      bot.sendMessage(chatId, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.");
    } catch (error) {
      bot.sendMessage(chatId, error.message);
    }
  } else if (action === "start_search") {
    try {
      const ads = await searchAds(
        searchParams.brand,
        searchParams.model,
        searchParams.year,
        chatId
      );
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      console.log(ads);

      await bot.deleteMessage(chatId, messageId);
      if (ads.length == 0) {
        await bot.sendMessage(chatId, "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        // –ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞
        searchParams.brand = null;
        searchParams.model = null;
        searchParams.year = null;
        await sendMenu(chatId);
      }
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–¥–µ—Å—å –Ω–µ—Ç
    } catch (error) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞
      console.error(error);
      await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞.");
    }
  } else if (action === "next_save") {
    try {
      await bot.editMessageText(
        `${adsIndex[chatId].index + 1}/${result[chatId].length} ${
          result[chatId][adsIndex[chatId].index].car_url
        }`,
        {
          chat_id: chatId,
          message_id: messageId,
        }
      );

      adsIndex[chatId] = { index: adsIndex[chatId].index + 1 };
      if (adsIndex[chatId].index < result[chatId].length) {
        await savedMenu(chatId, result[chatId], adsIndex[chatId].index - 1);
      } else {
        await savedMenu(
          chatId,
          result[chatId][adsIndex[chatId].index - 1],
          adsIndex[chatId].index - 1
        );

        adsIndex[chatId] = { index: 1 };
      }
    } catch (error) {
      console.log(error);
    }
  } else if (action === "delete_save") {
    try {
      adsIndex[chatId] = { index: 1 };
      await bot.deleteMessage(chatId, messageId - 1, {
        chat_id: chatId,
        message_id: messageId,
      });
      await bot.deleteMessage(chatId, messageId, {
        chat_id: chatId,
        message_id: messageId,
      });
      await sendQuery(`DELETE FROM saved_cars WHERE id=${id}`);
      await sendMenu(chatId);
    } catch (error) {
      console.log(error);
    }
  } else if (action === "restart_search") {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
    searchParams.brand = null;
    searchParams.model = null;
    searchParams.year = null;
    await bot.editMessageText("–ù–∞—á–Ω–∏—Ç–µ –≤—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–Ω–æ–≤–æ:", {
      chat_id: chatId,
      message_id: messageId,
    });
    await sendBrandSelection(chatId);
  } else if (action === "exit") {
    try {
      await bot.editMessageText("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
        chat_id: chatId,
        message_id: messageId,
      });
      await sendMenu(chatId);
    } catch (error) {
      console.log(error);
    }
  } else if (action === "save") {
    try {
      await bot.deleteMessage(chatId, messageId);
      const result = await sendQuery(
        `INSERT INTO saved_cars (telegram_id, car_url) VALUES ('${callbackQuery.from.id}','${bulletins[currentBulletinIndex]}')`
      );
      bot.sendMessage(chatId, `–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!`);
    } catch (error) {
      bot.sendMessage(chatId, `${error}`);
      console.error(error);
    }
    currentBulletinIndex++;
    await sendCurrentBulletinWithButtons(chatId);
  } else if (action === "saved") {
    try {
      result[chatId] = await sendQuery(
        `SELECT car_url, id FROM saved_cars WHERE telegram_id = '${callbackQuery.from.id}'`
      );
      await bot.deleteMessage(chatId, messageId - 1);
      await bot.deleteMessage(chatId, messageId);
      await bot.sendMessage(chatId, `–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:`);
      if (result[chatId].length > 0) {
        await bot.sendMessage(
          chatId,
          `1/${result[chatId].length} ${result[chatId][0].car_url}}`
        );
        isReady = false;
        if (result[chatId].length > 1) await savedMenu(chatId, result[chatId]);
        else await savedMenu(chatId, result[chatId][0]);
      } else {
        bot.sendMessage(chatId, `–ü—É—Å—Ç–æ!`);
        isReady = true;
      }
    } catch (error) {
      await bot.sendMessage(chatId, `${error}`);
      console.error(error);
    }
    // await bot.editMessageText('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { chat_id: chatId, message_id: messageId });
    if (isReady == true) {
      await bot.sendMessage(chatId, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:");
      await sendMenu(chatId);
    }
  } else if (action === "next") {
    await bot.deleteMessage(chatId, messageId);
    currentBulletinIndex++;
    await sendCurrentBulletinWithButtons(chatId);
  } else if (action === "subscriptions") {
    try {
      bot.deleteMessage(chatId, messageId - 1);
      bot.deleteMessage(chatId, messageId);
      await subscriptions(chatId, status);
    } catch (error) {
      bot.sendMessage(chatId, error.message);
    }
  }
});

const cron = require("node-cron");

function sendNotification(chatId) {
  bot.sendMessage(chatId, `–≠—Ç–æ –≤–∞—à–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${chatId}`);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const messageText = msg.text;
  const messageId = msg.message_id;

  adsIndex[chatId] = { index: 1 };

  try {
    const result = await sendQuery(
      `INSERT INTO users (telegram_id, username) VALUES ('${msg.from.id}','${msg.from.username}') ON DUPLICATE KEY UPDATE telegram_id='${msg.from.id}', username = '${msg.from.username}'`
    );
  } catch (error) {
    console.error(error);
  }

  if (messageText === "/start") {
    // await bot.deleteMessage(chatId, messageId);
    await sendBrandSelection(chatId, 1);
  } else if (
    msg.reply_to_message &&
    msg.reply_to_message.text === "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏:"
  ) {
    try {
      searchParams.brand = messageText.toLowerCase();
      if (searchParams.brand == null) {
        await sendBrandSelection(chatId);
        return;
      }
      await bot.sendMessage(chatId, `–í—ã–±—Ä–∞–Ω–∞ –º–∞—Ä–∫–∞: ${searchParams.brand}`);
      await sendModelSelection(chatId);
    } catch (error) {
      bot.sendMessage(chatId, "–ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã");
      await sendBrandSelection(chatId);
    }
  } else if (
    msg.reply_to_message &&
    msg.reply_to_message.text === "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:"
  ) {
    try {
      searchParams.model = messageText.toLowerCase();
      if (searchParams.model == null) {
        await sendModelSelection(chatId);
        return;
      }
      await bot.sendMessage(chatId, `–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: ${searchParams.model}`);
      await sendYearInput(chatId);
    } catch (error) {
      bot.sendMessage(chatId, "–ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã");
      await sendModelSelection(chatId);
    }
  } else if (
    msg.reply_to_message &&
    msg.reply_to_message.text === "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:"
  ) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ–¥–∞
    try {
      searchParams.year = parseInt(messageText);
      console.log(searchParams.year);
      if (isNaN(searchParams.year)) {
        await bot.sendMessage(chatId, "–ì–æ–¥ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞");
        await sendYearInput(chatId);
        return;
      }
      await bot.sendMessage(chatId, `–í—ã–±—Ä–∞–Ω –≥–æ–¥: ${searchParams.year}`);
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫" –∏–ª–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
      await sendSearchParams(chatId);
    } catch (error) {
      bot.sendMessage(chatId, error.message);
    }
  } else {
    await handleRandomMessage(chatId);
    await sendMenu(chatId);
  }
});

// todo: —É–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–µ–µ –∏ —Å–¥–µ–ª–∞—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
